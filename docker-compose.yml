version: '3.8'

services:
  rabbitmq:
    hostname: rabbit
    command: sh -c "rabbitmq-plugins enable rabbitmq_management; rabbitmq-server"
    image: rabbitmq:3.10-rc-management-alpine
    volumes:
      - "./data:/var/lib/rabbitmq/mnesia/"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - nginx_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      
  reverse-proxy:
    image: nginx
    container_name: reverse-proxy
    ports:
      - "8888:80"
    volumes:
      - ./my-server.conf:/etc/nginx/nginx.conf
    networks:
      - nginx_network
    depends_on:
      - authapi
      - networkapi
      - postapi
      - commentapi
      - likesapi

  authapi:
    build: ./AuthAPI
    container_name: authapi
    depends_on:
      postgres :
        condition: service_healthy
      neo4j :
        condition: service_healthy
      rabbitmq :
        condition: service_healthy
    env_file:
      - AuthAPI/.dev.env
    networks:
      - nginx_network

  networkapi:
    build: ./NetworkAPI
    container_name: networkapi
    depends_on:
      rabbitmq :
        condition: service_healthy

      neo4j :
        condition: service_healthy
    ports:
      - "2222:2222"
    env_file:
      - NetworkAPI/.dev.env
    networks:
      - nginx_network

  postapi:
    build: ./PostAPI
    container_name: postapi
    depends_on:
      neo4j :
        condition: service_healthy
    ports:
      - "3333:3333"
    env_file:
      - PostAPI/.dev.env
    networks:
      - nginx_network

  commentapi:
    build: ./CommentAPI
    container_name: commentapi
    depends_on:
      neo4j :
        condition: service_healthy
    ports:
      - "4444:4444"
    env_file:
      - CommentAPI/.dev.env
    networks:
      - nginx_network

  likesapi:
    build: ./LikesAPI
    container_name: likesapi
    depends_on:
      neo4j :
        condition: service_healthy
    ports:
      - "5555:5555"
    env_file:
      - CommentAPI/.dev.env
    networks:
      - nginx_network

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      
    ports:
      - "5432:5432"

    volumes: 
      - db:/var/lib/postgresql/
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - nginx_network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j
    container_name: neo4j
    environment:
      NEO4J_AUTH: none
      
    ports:
      - "7474:7474"
      - "7687:7687"

    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s

    volumes:
      - neo4j_data:/data/

    networks:
      - nginx_network
      
## volumes to be generated, these are saved somewhere for repeated use by docker
volumes:
    db:
      driver: local

    neo4j_data:

networks:
  nginx_network:
    driver: bridge